---
openapi: "3.0.1"
info:
  title: "OpenAPI definition"
  version: "v0"
servers:
- url: "http://localhost"
  description: "Generated server url"
paths:
  /api/v1/webauthn/replay:
    post:
      tags:
      - "web-authn-replay-controller"
      summary: "Replay a stored WebAuthn assertion without mutating credential state"
      operationId: "replayStoredWebAuthn"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebAuthnReplayRequest"
        required: true
      responses:
        "200":
          description: "Replay matched stored credential"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnReplayResponse"
        "422":
          description: "Replay rejected or request invalid"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnReplayErrorResponse"
        "500":
          description: "Unexpected error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnReplayErrorResponse"
  /api/v1/webauthn/evaluate:
    post:
      tags:
      - "web-authn-evaluation-controller"
      summary: "Generate a WebAuthn assertion using a stored credential"
      operationId: "evaluateStoredWebAuthn"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebAuthnStoredEvaluationRequest"
        required: true
      responses:
        "200":
          description: "Assertion generated"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnEvaluationResponse"
        "422":
          description: "Request invalid"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnEvaluationErrorResponse"
        "500":
          description: "Unexpected error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnEvaluationErrorResponse"
  /api/v1/webauthn/evaluate/inline:
    post:
      tags:
      - "web-authn-evaluation-controller"
      summary: "Generate a WebAuthn assertion without loading a stored credential"
      operationId: "evaluateInlineWebAuthn"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebAuthnInlineEvaluationRequest"
        required: true
      responses:
        "200":
          description: "Assertion generated"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnEvaluationResponse"
        "422":
          description: "Request invalid"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnEvaluationErrorResponse"
        "500":
          description: "Unexpected error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnEvaluationErrorResponse"
  /api/v1/webauthn/credentials/seed:
    post:
      tags:
      - "web-authn-credential-seed-controller"
      operationId: "seedCredentials"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeedResponse"
  /api/v1/webauthn/attestations/seed:
    post:
      tags:
      - "web-authn-attestation-seed-controller"
      operationId: "seedStoredAttestations"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SeedResponse"
  /api/v1/webauthn/attest:
    post:
      tags:
      - "web-authn-attestation-controller"
      summary: "Generate a deterministic WebAuthn attestation object"
      operationId: "generateWebAuthnAttestation"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebAuthnAttestationGenerationRequest"
        required: true
      responses:
        "200":
          description: "Attestation generated"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnAttestationResponse"
        "422":
          description: "Request invalid"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnAttestationErrorResponse"
        "500":
          description: "Unexpected error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnAttestationErrorResponse"
  /api/v1/webauthn/attest/replay:
    post:
      tags:
      - "web-authn-attestation-controller"
      summary: "Replay a WebAuthn attestation verification"
      operationId: "replayWebAuthnAttestation"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebAuthnAttestationReplayRequest"
        required: true
      responses:
        "200":
          description: "Attestation replay succeeded"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnAttestationResponse"
        "422":
          description: "Request invalid"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnAttestationErrorResponse"
        "500":
          description: "Unexpected error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WebAuthnAttestationErrorResponse"
  /api/v1/totp/replay:
    post:
      tags:
      - "totp-replay-controller"
      summary: "Replay a TOTP credential without mutating simulator state"
      operationId: "replayTotp"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpReplayRequest"
        required: true
      responses:
        "200":
          description: "Replay completed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TotpReplayResponse"
        "422":
          description: "Replay validation failed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TotpReplayErrorResponse"
        "500":
          description: "Unexpected error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TotpReplayErrorResponse"
  /api/v1/totp/evaluate:
    post:
      tags:
      - "totp-evaluation-controller"
      summary: "Validate a stored TOTP credential"
      operationId: "evaluateStoredTotp"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpStoredEvaluationRequest"
        required: true
      responses:
        "200":
          description: "OTP accepted"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TotpEvaluationResponse"
        "422":
          description: "OTP rejected or validation failed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TotpEvaluationErrorResponse"
        "500":
          description: "Unexpected error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TotpEvaluationErrorResponse"
  /api/v1/totp/evaluate/inline:
    post:
      tags:
      - "totp-evaluation-controller"
      summary: "Validate a TOTP submission without referencing stored credentials"
      operationId: "evaluateInlineTotp"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpInlineEvaluationRequest"
        required: true
      responses:
        "200":
          description: "OTP accepted"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TotpEvaluationResponse"
        "422":
          description: "OTP rejected or validation failed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TotpEvaluationErrorResponse"
        "500":
          description: "Unexpected error"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TotpEvaluationErrorResponse"
  /api/v1/totp/credentials/seed:
    post:
      tags:
      - "totp-credential-seed-controller"
      operationId: "seedCredentials_1"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeedResponse"
  /api/v1/ocra/verify:
    post:
      tags:
      - "ocra-verification-controller"
      summary: "Verify an OCRA OTP submission"
      description: "Replays an OCRA execution with the supplied OTP and context to\
        \ determine whether the OTP was valid for the referenced credential configuration."
      operationId: "verify"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OcraVerificationRequest"
        required: true
      responses:
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OcraVerificationErrorResponse"
        "200":
          description: "Verification completed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OcraVerificationResponse"
              examples:
                Match:
                  summary: "Successful verification"
                  description: "Match"
                  value:
                    status: "match"
                    reasonCode: "match"
                    metadata:
                      credentialSource: "stored"
                      suite: "OCRA-1:HOTP-SHA256-8:QA08-S064"
                      otpLength: 8
                      durationMillis: 11
                      contextFingerprint: "Base64URL-Hash"
                      telemetryId: "rest-ocra-verify-<uuid>"
                      outcome: "match"
        "404":
          description: "Credential not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OcraVerificationErrorResponse"
        "422":
          description: "Verification payload failed validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OcraVerificationErrorResponse"
              examples:
                Missing context:
                  summary: "Validation failure"
                  description: "Missing context"
                  value:
                    error: "invalid_input"
                    message: "sessionHex is required"
                    details:
                      telemetryId: "rest-ocra-verify-<uuid>"
                      status: "invalid"
                      suite: "OCRA-1:HOTP-SHA256-8:QA08-S064"
                      field: "sessionHex"
                      reasonCode: "session_required"
                      sanitized: "true"
  /api/v1/ocra/evaluate:
    post:
      tags:
      - "ocra-evaluation-controller"
      summary: "Evaluate an OCRA request"
      description: "Computes an OCRA OTP for the supplied suite and runtime parameters."
      operationId: "evaluate"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OcraEvaluationRequest"
        required: true
      responses:
        "400":
          description: "Invalid request payload"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OcraEvaluationErrorResponse"
              examples:
                Missing session payload:
                  summary: "Validation failure with reason code"
                  description: "Missing session payload"
                  value:
                    error: "invalid_input"
                    message: "sessionHex is required for the requested suite"
                    details:
                      telemetryId: "rest-ocra-<uuid>"
                      status: "invalid"
                      suite: "OCRA-1:HOTP-SHA256-8:QA08-S064"
                      field: "sessionHex"
                      reasonCode: "session_required"
                      sanitized: "true"
        "200":
          description: "Evaluation successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OcraEvaluationResponse"
        "500":
          description: "Unexpected server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OcraEvaluationErrorResponse"
  /api/v1/ocra/credentials/seed:
    post:
      tags:
      - "ocra-credential-directory-controller"
      operationId: "seedCredentials_2"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeedResponse"
  /api/v1/hotp/replay:
    post:
      tags:
      - "hotp-replay-controller"
      summary: "Replay a HOTP submission"
      description: "Validates an OTP against a stored HOTP credential without advancing\
        \ counters or replays inline HOTP parameters for diagnostic purposes."
      operationId: "replay"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HotpReplayRequest"
        required: true
      responses:
        "422":
          description: "Validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotpReplayErrorResponse"
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotpReplayErrorResponse"
        "200":
          description: "Replay completed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotpReplayResponse"
  /api/v1/hotp/evaluate:
    post:
      tags:
      - "hotp-evaluation-controller"
      summary: "Evaluate a stored HOTP credential"
      description: "Validates a submitted OTP against a persisted HOTP credential\
        \ and advances the counter on success."
      operationId: "evaluateStored"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HotpStoredEvaluationRequest"
        required: true
      responses:
        "200":
          description: "Evaluation completed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotpEvaluationResponse"
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotpEvaluationErrorResponse"
        "422":
          description: "Validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotpEvaluationErrorResponse"
  /api/v1/hotp/evaluate/inline:
    post:
      tags:
      - "hotp-evaluation-controller"
      summary: "Evaluate HOTP parameters inline"
      description: "Validates an OTP using inline HOTP parameters without mutating\
        \ stored credentials."
      operationId: "evaluateInline"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HotpInlineEvaluationRequest"
        required: true
      responses:
        "200":
          description: "Evaluation completed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotpEvaluationResponse"
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotpEvaluationErrorResponse"
        "422":
          description: "Validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotpEvaluationErrorResponse"
  /api/v1/hotp/credentials/seed:
    post:
      tags:
      - "hotp-credential-directory-controller"
      operationId: "seedCredentials_3"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeedResponse"
  /api/v1/webauthn/credentials:
    get:
      tags:
      - "web-authn-credential-directory-controller"
      operationId: "listCredentials"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/WebAuthnCredentialSummary"
  /api/v1/webauthn/credentials/{credentialId}/sample:
    get:
      tags:
      - "web-authn-credential-directory-controller"
      operationId: "storedSample"
      parameters:
      - name: "credentialId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebAuthnStoredSampleResponse"
  /api/v1/webauthn/attestations/{credentialId}:
    get:
      tags:
      - "web-authn-attestation-stored-controller"
      operationId: "metadata"
      parameters:
      - name: "credentialId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StoredAttestationMetadataResponse"
  /api/v1/totp/credentials:
    get:
      tags:
      - "totp-credential-directory-controller"
      operationId: "listCredentials_1"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TotpCredentialSummary"
  /api/v1/totp/credentials/{credentialId}/sample:
    get:
      tags:
      - "totp-credential-directory-controller"
      operationId: "storedSample_1"
      parameters:
      - name: "credentialId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpStoredSampleResponse"
  /api/v1/ocra/credentials:
    get:
      tags:
      - "ocra-credential-directory-controller"
      operationId: "listCredentials_2"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OcraCredentialSummary"
  /api/v1/ocra/credentials/{credentialId}/sample:
    get:
      tags:
      - "ocra-credential-directory-controller"
      operationId: "fetchSample"
      parameters:
      - name: "credentialId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OcraCredentialSampleResponse"
  /api/v1/hotp/credentials:
    get:
      tags:
      - "hotp-credential-directory-controller"
      operationId: "listCredentials_3"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/HotpCredentialSummary"
  /api/v1/hotp/credentials/{credentialId}/sample:
    get:
      tags:
      - "hotp-credential-directory-controller"
      operationId: "storedSample_2"
      parameters:
      - name: "credentialId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HotpStoredSampleResponse"
components:
  schemas:
    VerboseTraceAttributePayload:
      type: "object"
      properties:
        type:
          type: "string"
          description: "Attribute type (string, int, hex, etc.)."
        name:
          type: "string"
          description: "Attribute name."
        value:
          type: "string"
          description: "Formatted attribute value."
      description: "Ordered attribute entry describing a captured value for a verbose\
        \ trace step."
    VerboseTracePayload:
      type: "object"
      properties:
        operation:
          type: "string"
          description: "Stable identifier describing the traced operation (for example,\
            \ totp.evaluate.stored)."
        metadata:
          type: "object"
          additionalProperties:
            type: "string"
            description: "Additional metadata associated with the trace."
          description: "Additional metadata associated with the trace."
        steps:
          type: "array"
          description: "Ordered steps executed during the operation."
          items:
            $ref: "#/components/schemas/VerboseTraceStepPayload"
      description: "Deterministic, ordered diagnostic trace emitted when verbose mode\
        \ is enabled for a credential workflow."
    VerboseTraceStepPayload:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Stable identifier that enables downstream tooling to group\
            \ similar steps."
        summary:
          type: "string"
          description: "Human-readable summary of what the step accomplished."
        detail:
          type: "string"
          description: "Additional detail about the specific helper or component invoked."
        spec:
          type: "string"
          description: "Reference to the governing specification section when applicable."
        attributes:
          type: "object"
          additionalProperties:
            type: "object"
            description: "Arbitrary attributes captured for the step, grouped by attribute\
              \ type."
          description: "Arbitrary attributes captured for the step, grouped by attribute\
            \ type."
        orderedAttributes:
          type: "array"
          description: "Ordered attribute entries preserved in capture order."
          items:
            $ref: "#/components/schemas/VerboseTraceAttributePayload"
        notes:
          type: "object"
          additionalProperties:
            type: "string"
            description: "Free-form notes associated with the step."
          description: "Free-form notes associated with the step."
      description: "Single diagnostic entry representing one action performed while\
        \ handling the request."
    WebAuthnReplayMetadata:
      type: "object"
      properties:
        telemetryId:
          type: "string"
        credentialSource:
          type: "string"
        credentialReference:
          type: "boolean"
        credentialId:
          type: "string"
        relyingPartyId:
          type: "string"
        origin:
          type: "string"
        algorithm:
          type: "string"
        userVerificationRequired:
          type: "boolean"
        error:
          type: "string"
    WebAuthnReplayResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        match:
          type: "boolean"
        metadata:
          $ref: "#/components/schemas/WebAuthnReplayMetadata"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    WebAuthnReplayErrorResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        message:
          type: "string"
        details:
          type: "object"
          additionalProperties:
            type: "object"
        metadata:
          type: "object"
          additionalProperties:
            type: "object"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    WebAuthnReplayRequest:
      type: "object"
      properties:
        credentialId:
          type: "string"
        credentialName:
          type: "string"
        relyingPartyId:
          type: "string"
        origin:
          type: "string"
        expectedType:
          type: "string"
        publicKey:
          type: "string"
        signatureCounter:
          type: "integer"
          format: "int64"
        userVerificationRequired:
          type: "boolean"
        algorithm:
          type: "string"
        expectedChallenge:
          type: "string"
        clientData:
          type: "string"
        authenticatorData:
          type: "string"
        signature:
          type: "string"
        trustAnchors:
          type: "array"
          items:
            type: "string"
        verbose:
          type: "boolean"
    WebAuthnAssertionResponse:
      type: "object"
      properties:
        clientDataJSON:
          type: "string"
        authenticatorData:
          type: "string"
        signature:
          type: "string"
    WebAuthnEvaluationMetadata:
      type: "object"
      properties:
        telemetryId:
          type: "string"
        credentialSource:
          type: "string"
        credentialReference:
          type: "boolean"
        credentialId:
          type: "string"
        relyingPartyId:
          type: "string"
        origin:
          type: "string"
        algorithm:
          type: "string"
        userVerificationRequired:
          type: "boolean"
        error:
          type: "string"
    WebAuthnEvaluationResponse:
      type: "object"
      properties:
        status:
          type: "string"
        assertion:
          $ref: "#/components/schemas/WebAuthnGeneratedAssertion"
        metadata:
          $ref: "#/components/schemas/WebAuthnEvaluationMetadata"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    WebAuthnGeneratedAssertion:
      type: "object"
      properties:
        type:
          type: "string"
        id:
          type: "string"
        rawId:
          type: "string"
        response:
          $ref: "#/components/schemas/WebAuthnAssertionResponse"
    WebAuthnEvaluationErrorResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        message:
          type: "string"
        details:
          type: "object"
          additionalProperties:
            type: "object"
        metadata:
          type: "object"
          additionalProperties:
            type: "object"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    WebAuthnStoredEvaluationRequest:
      type: "object"
      properties:
        credentialId:
          type: "string"
        relyingPartyId:
          type: "string"
        origin:
          type: "string"
        expectedType:
          type: "string"
        challenge:
          type: "string"
        privateKey:
          type: "string"
        signatureCounter:
          type: "integer"
          format: "int64"
        userVerificationRequired:
          type: "boolean"
        verbose:
          type: "boolean"
    WebAuthnInlineEvaluationRequest:
      type: "object"
      properties:
        credentialName:
          type: "string"
        credentialId:
          type: "string"
        relyingPartyId:
          type: "string"
        origin:
          type: "string"
        expectedType:
          type: "string"
        algorithm:
          type: "string"
        signatureCounter:
          type: "integer"
          format: "int64"
        userVerificationRequired:
          type: "boolean"
        challenge:
          type: "string"
        privateKey:
          type: "string"
        verbose:
          type: "boolean"
    SeedResponse:
      type: "object"
      properties:
        addedCount:
          type: "integer"
          format: "int32"
        canonicalCount:
          type: "integer"
          format: "int32"
        addedCredentialIds:
          type: "array"
          items:
            type: "string"
    WebAuthnAttestationMetadata:
      type: "object"
      properties:
        telemetryId:
          type: "string"
          description: "Telemetry correlation identifier"
          example: "rest-fido2-attest-2c66c5f9"
        reasonCode:
          type: "string"
          description: "Reason code associated with the result"
          example: "generated"
        attestationFormat:
          type: "string"
          description: "Attestation format processed by the service"
          example: "packed"
        relyingPartyId:
          type: "string"
          description: "Reported relying party identifier"
          example: "example.org"
        anchorProvided:
          type: "boolean"
          description: "Flag indicating whether trust anchors were provided"
        anchorTrusted:
          type: "boolean"
          description: "Flag indicating whether provided trust anchors matched the\
            \ certificate chain"
        selfAttestedFallback:
          type: "boolean"
          description: "Flag indicating the verification fell back to self-attestation"
        anchorSource:
          type: "string"
          description: "Derived source describing which anchors were used"
          example: "provided"
        anchorMode:
          type: "string"
          description: "Indicates whether anchors were loaded fresh or retrieved from\
            \ cache"
          example: "fresh"
        certificateFingerprint:
          type: "string"
          description: "SHA-256 fingerprint of the attestation certificate when anchors\
            \ were provided"
        aaguid:
          type: "string"
          description: "Authenticator AAGUID rendered as a canonical UUID string"
        anchorMetadataEntry:
          type: "string"
          description: "Offline metadata entry leveraged when resolving trust anchors"
          example: "mds-w3c-packed-es256"
        metadataAnchorIds:
          type: "array"
          description: "Curated metadata entry identifiers resolved for trust anchors"
          example:
          - "mds-w3c-packed-es256"
          items:
            type: "string"
            description: "Curated metadata entry identifiers resolved for trust anchors"
            example: "[\"mds-w3c-packed-es256\"]"
        anchorWarnings:
          type: "array"
          description: "Warnings generated while processing trust anchors"
          items:
            type: "string"
            description: "Warnings generated while processing trust anchors"
        signatureIncluded:
          type: "boolean"
          description: "Indicates whether the generated attestation includes a signature"
        customRootCount:
          type: "integer"
          description: "Number of custom roots provided for generation"
          format: "int32"
          example: 1
        customRootSource:
          type: "string"
          description: "Source describing how custom roots were supplied"
          example: "inline"
        generationMode:
          type: "string"
          description: "Signing mode applied during generation"
          example: "self_signed"
        inputSource:
          type: "string"
          description: "Input source used to build the request"
          example: "manual"
        storedCredentialId:
          type: "string"
          description: "Stored credential identifier used for generation"
          example: "stored-packed-es256"
        certificateChainCount:
          type: "integer"
          description: "Number of certificates returned in the attestation chain"
          format: "int32"
          example: 2
        certificateChainPem:
          type: "array"
          description: "Attestation certificate chain rendered in PEM format"
          items:
            type: "string"
            description: "Attestation certificate chain rendered in PEM format"
      description: "Telemetry metadata describing the outcome of attestation generation\
        \ or replay."
    WebAuthnAttestationResponse:
      type: "object"
      properties:
        status:
          type: "string"
          description: "High level status indicator (success on verified attestation)"
          example: "success"
        generatedAttestation:
          $ref: "#/components/schemas/WebAuthnGeneratedAttestation"
        attestedCredential:
          $ref: "#/components/schemas/WebAuthnAttestedCredential"
        metadata:
          $ref: "#/components/schemas/WebAuthnAttestationMetadata"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
      description: "Response payload for WebAuthn attestation verification and replay\
        \ endpoints."
    WebAuthnAttestedCredential:
      type: "object"
      properties:
        relyingPartyId:
          type: "string"
          description: "Relying party identifier associated with the credential"
          example: "example.org"
        credentialId:
          type: "string"
          description: "Credential identifier encoded as Base64URL"
          example: "yab1s0YtAoc_6gxWhiI0-Z8IFygITlEbt3YCAaiQVKU"
        algorithm:
          type: "string"
          description: "Authenticator signature algorithm label"
          example: "ES256"
        userVerificationRequired:
          type: "boolean"
          description: "Whether the authenticator enforces user verification"
        signatureCounter:
          type: "integer"
          description: "Authenticator signature counter value"
          format: "int64"
        aaguid:
          type: "string"
          description: "Authenticator AAGUID rendered as a canonical UUID string"
          example: "6f4d6a94-7a9b-4c82-9c6d-9f83c60b0f14"
      description: "Credential metadata produced by a successful WebAuthn attestation\
        \ verification."
    WebAuthnGeneratedAttestation:
      type: "object"
      properties:
        type:
          type: "string"
          description: "Credential type"
          example: "public-key"
        id:
          type: "string"
          description: "Credential identifier"
          example: "Q2Jl...JfA"
        rawId:
          type: "string"
          description: "Raw credential identifier"
          example: "Q2Jl...JfA"
        response:
          $ref: "#/components/schemas/WebAuthnGeneratedAttestationResponse"
      description: "Generated WebAuthn attestation payload returned by the attestation\
        \ endpoint."
    WebAuthnGeneratedAttestationResponse:
      type: "object"
      properties:
        clientDataJSON:
          type: "string"
          description: "ClientDataJSON payload encoded as Base64URL"
        attestationObject:
          type: "string"
          description: "Attestation object encoded as Base64URL"
      description: "Attestation response payload mirroring WebAuthn assertions"
    WebAuthnAttestationErrorResponse:
      type: "object"
      properties:
        status:
          type: "string"
          description: "High level status indicator for the failure"
          example: "invalid"
        reasonCode:
          type: "string"
          description: "Reason code describing the failure"
          example: "client_data_challenge_mismatch"
        message:
          type: "string"
          description: "Human-readable error message"
          example: "Client data challenge mismatch."
        details:
          type: "object"
          additionalProperties:
            type: "object"
            description: "Additional details about the failure"
          description: "Additional details about the failure"
        metadata:
          type: "object"
          additionalProperties:
            type: "object"
            description: "Telemetry metadata captured during verification"
          description: "Telemetry metadata captured during verification"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
      description: "Error payload returned when WebAuthn attestation verification\
        \ fails."
    WebAuthnAttestationGenerationRequest:
      type: "object"
      properties:
        inputSource:
          type: "string"
          description: "Input source selection"
          example: "PRESET"
          enum:
          - "PRESET"
          - "MANUAL"
          - "STORED"
        attestationId:
          type: "string"
          description: "Fixture identifier to generate"
          example: "w3c-packed-es256"
        format:
          type: "string"
          description: "Attestation format label"
          example: "packed"
        relyingPartyId:
          type: "string"
          description: "Expected relying party ID"
          example: "example.org"
        origin:
          type: "string"
          description: "Expected origin"
          example: "https://example.org"
        challenge:
          type: "string"
          description: "Challenge encoded as Base64URL"
        credentialId:
          type: "string"
          description: "Stored credential identifier"
          example: "stored-packed-es256"
        credentialPrivateKey:
          type: "string"
          description: "Credential private key (JWK or PEM/PKCS#8)"
        attestationPrivateKey:
          type: "string"
          description: "Attestation private key (JWK or PEM/PKCS#8)"
        attestationCertificateSerial:
          type: "string"
          description: "Attestation certificate serial encoded as Base64URL"
        signingMode:
          type: "string"
          description: "Signing mode selection"
          example: "SELF_SIGNED"
          enum:
          - "SELF_SIGNED"
          - "UNSIGNED"
          - "CUSTOM_ROOT"
        customRootCertificates:
          type: "array"
          description: "Inline PEM encoded custom root certificates"
          items:
            type: "string"
            description: "Inline PEM encoded custom root certificates"
        seedPresetId:
          type: "string"
          description: "Optional seed preset id when overrides are applied"
        overrides:
          type: "array"
          description: "Set of edited fields compared to the preset"
          items:
            type: "string"
            description: "Set of edited fields compared to the preset"
        verbose:
          type: "boolean"
      description: "Request payload for generating a deterministic WebAuthn attestation\
        \ object."
    WebAuthnAttestationReplayRequest:
      required:
      - "attestationObject"
      - "clientDataJson"
      - "expectedChallenge"
      - "format"
      - "origin"
      - "relyingPartyId"
      type: "object"
      properties:
        inputSource:
          type: "string"
          description: "Input source selection"
          example: "STORED"
          enum:
          - "PRESET"
          - "MANUAL"
          - "STORED"
        credentialId:
          type: "string"
          description: "Stored credential identifier (required for stored input source)"
          example: "stored-packed-es256"
        attestationId:
          type: "string"
          description: "Identifier echoed back in telemetry metadata"
          example: "w3c-packed-es256"
        format:
          type: "string"
          description: "Attestation statement format label (packed, fido-u2f, tpm,\
            \ android-key)"
          example: "packed"
        relyingPartyId:
          type: "string"
          description: "Expected relying party identifier"
          example: "example.org"
        origin:
          type: "string"
          description: "Expected origin for the attested client data"
          example: "https://example.org"
        attestationObject:
          type: "string"
          description: "Authenticator attestation object encoded as Base64URL"
          example: "o2NmbXRmcGFja2VkZ2F0dFN0bXQ..."
        clientDataJson:
          type: "string"
          description: "ClientDataJSON payload encoded as Base64URL"
          example: "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoi..."
        expectedChallenge:
          type: "string"
          description: "Expected challenge encoded as Base64URL"
          example: "wRhKX934BF4T3Ef1S2H1pla2ZrWQGPFthw6SVumVIBI"
        metadataAnchorIds:
          type: "array"
          description: "Curated metadata entry identifiers supplying trust anchors"
          example:
          - "mds-w3c-packed-es256"
          items:
            type: "string"
            description: "Curated metadata entry identifiers supplying trust anchors"
            example: "[\"mds-w3c-packed-es256\"]"
        trustAnchors:
          type: "array"
          description: "PEM encoded X.509 trust anchors to validate the attestation\
            \ certificate chain"
          items:
            type: "string"
            description: "PEM encoded X.509 trust anchors to validate the attestation\
              \ certificate chain"
        verbose:
          type: "boolean"
      description: "Request payload for replaying a WebAuthn attestation verification\
        \ with optional trust anchors."
    TotpReplayMetadata:
      type: "object"
      properties:
        credentialSource:
          type: "string"
        credentialId:
          type: "string"
        credentialReference:
          type: "boolean"
        algorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        stepSeconds:
          type: "integer"
          format: "int64"
        driftBackwardSteps:
          type: "integer"
          format: "int32"
        driftForwardSteps:
          type: "integer"
          format: "int32"
        matchedSkewSteps:
          type: "integer"
          format: "int32"
        timestampOverrideProvided:
          type: "boolean"
        telemetryId:
          type: "string"
    TotpReplayResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        metadata:
          $ref: "#/components/schemas/TotpReplayMetadata"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    TotpReplayErrorResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        message:
          type: "string"
        details:
          type: "object"
          additionalProperties:
            type: "object"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    TotpReplayRequest:
      type: "object"
      properties:
        credentialId:
          type: "string"
        otp:
          type: "string"
        timestamp:
          type: "integer"
          format: "int64"
        timestampOverride:
          type: "integer"
          format: "int64"
        driftBackward:
          type: "integer"
          format: "int32"
        driftForward:
          type: "integer"
          format: "int32"
        sharedSecretHex:
          type: "string"
        algorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        stepSeconds:
          type: "integer"
          format: "int64"
        verbose:
          type: "boolean"
    TotpEvaluationMetadata:
      type: "object"
      properties:
        credentialSource:
          type: "string"
        matchedSkewSteps:
          type: "integer"
          format: "int32"
        algorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        stepSeconds:
          type: "integer"
          format: "int64"
        driftBackwardSteps:
          type: "integer"
          format: "int32"
        driftForwardSteps:
          type: "integer"
          format: "int32"
        timestampOverrideProvided:
          type: "boolean"
        telemetryId:
          type: "string"
    TotpEvaluationResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        valid:
          type: "boolean"
        otp:
          type: "string"
        metadata:
          $ref: "#/components/schemas/TotpEvaluationMetadata"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    TotpEvaluationErrorResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        message:
          type: "string"
        details:
          type: "object"
          additionalProperties:
            type: "object"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    TotpStoredEvaluationRequest:
      type: "object"
      properties:
        credentialId:
          type: "string"
        otp:
          type: "string"
        timestamp:
          type: "integer"
          format: "int64"
        driftBackward:
          type: "integer"
          format: "int32"
        driftForward:
          type: "integer"
          format: "int32"
        timestampOverride:
          type: "integer"
          format: "int64"
        verbose:
          type: "boolean"
    TotpInlineEvaluationRequest:
      type: "object"
      properties:
        sharedSecretHex:
          type: "string"
        algorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        stepSeconds:
          type: "integer"
          format: "int64"
        driftBackward:
          type: "integer"
          format: "int32"
        driftForward:
          type: "integer"
          format: "int32"
        timestamp:
          type: "integer"
          format: "int64"
        timestampOverride:
          type: "integer"
          format: "int64"
        otp:
          type: "string"
        metadata:
          type: "object"
          additionalProperties:
            type: "string"
        verbose:
          type: "boolean"
    OcraVerificationContext:
      type: "object"
      properties:
        challenge:
          type: "string"
        clientChallenge:
          type: "string"
        serverChallenge:
          type: "string"
        sessionHex:
          type: "string"
        timestampHex:
          type: "string"
        counter:
          type: "integer"
          format: "int64"
        pinHashHex:
          type: "string"
    OcraVerificationInlineCredential:
      type: "object"
      properties:
        suite:
          type: "string"
        sharedSecretHex:
          type: "string"
    OcraVerificationRequest:
      type: "object"
      properties:
        otp:
          type: "string"
        credentialId:
          type: "string"
        inlineCredential:
          $ref: "#/components/schemas/OcraVerificationInlineCredential"
        context:
          $ref: "#/components/schemas/OcraVerificationContext"
        verbose:
          type: "boolean"
    OcraVerificationErrorResponse:
      type: "object"
      properties:
        error:
          type: "string"
        message:
          type: "string"
        details:
          type: "object"
          additionalProperties:
            type: "object"
    OcraVerificationMetadata:
      type: "object"
      properties:
        credentialSource:
          type: "string"
        mode:
          type: "string"
        suite:
          type: "string"
        otpLength:
          type: "integer"
          format: "int32"
        durationMillis:
          type: "integer"
          format: "int64"
        contextFingerprint:
          type: "string"
        telemetryId:
          type: "string"
        outcome:
          type: "string"
    OcraVerificationResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        metadata:
          $ref: "#/components/schemas/OcraVerificationMetadata"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    OcraEvaluationRequest:
      type: "object"
      properties:
        credentialId:
          type: "string"
        suite:
          type: "string"
        sharedSecretHex:
          type: "string"
        challenge:
          type: "string"
        sessionHex:
          type: "string"
        clientChallenge:
          type: "string"
        serverChallenge:
          type: "string"
        pinHashHex:
          type: "string"
        timestampHex:
          type: "string"
        counter:
          type: "integer"
          format: "int64"
        verbose:
          type: "boolean"
    OcraEvaluationErrorResponse:
      type: "object"
      properties:
        error:
          type: "string"
        message:
          type: "string"
        details:
          type: "object"
          additionalProperties:
            type: "string"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    OcraEvaluationResponse:
      type: "object"
      properties:
        suite:
          type: "string"
        otp:
          type: "string"
        telemetryId:
          type: "string"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    HotpReplayRequest:
      type: "object"
      properties:
        credentialId:
          type: "string"
        sharedSecretHex:
          type: "string"
        algorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        counter:
          type: "integer"
          format: "int64"
        otp:
          type: "string"
        metadata:
          type: "object"
          additionalProperties:
            type: "string"
        verbose:
          type: "boolean"
    HotpReplayErrorResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        message:
          type: "string"
        details:
          type: "object"
          additionalProperties:
            type: "object"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    HotpReplayMetadata:
      type: "object"
      properties:
        credentialSource:
          type: "string"
        credentialId:
          type: "string"
        credentialReference:
          type: "boolean"
        hashAlgorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        previousCounter:
          type: "integer"
          format: "int64"
        nextCounter:
          type: "integer"
          format: "int64"
        telemetryId:
          type: "string"
    HotpReplayResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        metadata:
          $ref: "#/components/schemas/HotpReplayMetadata"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    HotpStoredEvaluationRequest:
      type: "object"
      properties:
        credentialId:
          type: "string"
        verbose:
          type: "boolean"
    HotpEvaluationMetadata:
      type: "object"
      properties:
        credentialSource:
          type: "string"
        credentialId:
          type: "string"
        credentialReference:
          type: "boolean"
        hashAlgorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        previousCounter:
          type: "integer"
          format: "int64"
        nextCounter:
          type: "integer"
          format: "int64"
        samplePresetKey:
          type: "string"
        samplePresetLabel:
          type: "string"
        telemetryId:
          type: "string"
    HotpEvaluationResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        otp:
          type: "string"
        metadata:
          $ref: "#/components/schemas/HotpEvaluationMetadata"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    HotpEvaluationErrorResponse:
      type: "object"
      properties:
        status:
          type: "string"
        reasonCode:
          type: "string"
        message:
          type: "string"
        details:
          type: "object"
          additionalProperties:
            type: "object"
        trace:
          $ref: "#/components/schemas/VerboseTracePayload"
    HotpInlineEvaluationRequest:
      type: "object"
      properties:
        sharedSecretHex:
          type: "string"
        algorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        counter:
          type: "integer"
          format: "int64"
        metadata:
          type: "object"
          additionalProperties:
            type: "string"
        verbose:
          type: "boolean"
    WebAuthnCredentialSummary:
      type: "object"
      properties:
        id:
          type: "string"
        label:
          type: "string"
        relyingPartyId:
          type: "string"
        algorithm:
          type: "string"
        userVerification:
          type: "boolean"
        attestationChallenge:
          type: "string"
    WebAuthnStoredSampleResponse:
      type: "object"
      properties:
        credentialId:
          type: "string"
        relyingPartyId:
          type: "string"
        origin:
          type: "string"
        expectedType:
          type: "string"
        algorithm:
          type: "string"
        userVerificationRequired:
          type: "boolean"
        challenge:
          type: "string"
        privateKeyJwk:
          type: "string"
    StoredAttestationMetadataResponse:
      type: "object"
      properties:
        storedCredentialId:
          type: "string"
        attestationId:
          type: "string"
        format:
          type: "string"
        relyingPartyId:
          type: "string"
        origin:
          type: "string"
        signingMode:
          type: "string"
        certificateChainPem:
          type: "array"
          items:
            type: "string"
        challenge:
          type: "string"
        attestationObject:
          type: "string"
        clientDataJson:
          type: "string"
    TotpCredentialSummary:
      type: "object"
      properties:
        id:
          type: "string"
        label:
          type: "string"
        algorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        stepSeconds:
          type: "integer"
          format: "int64"
        driftBackward:
          type: "integer"
          format: "int32"
        driftForward:
          type: "integer"
          format: "int32"
    TotpStoredSampleResponse:
      type: "object"
      properties:
        credentialId:
          type: "string"
        algorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        stepSeconds:
          type: "integer"
          format: "int64"
        driftBackward:
          type: "integer"
          format: "int32"
        driftForward:
          type: "integer"
          format: "int32"
        timestamp:
          type: "integer"
          format: "int64"
        otp:
          type: "string"
        metadata:
          type: "object"
          additionalProperties:
            type: "string"
    OcraCredentialSummary:
      type: "object"
      properties:
        id:
          type: "string"
        label:
          type: "string"
        suite:
          type: "string"
    Context:
      type: "object"
      properties:
        challenge:
          type: "string"
        sessionHex:
          type: "string"
        clientChallenge:
          type: "string"
        serverChallenge:
          type: "string"
        pinHashHex:
          type: "string"
        timestampHex:
          type: "string"
        counter:
          type: "integer"
          format: "int64"
    OcraCredentialSampleResponse:
      type: "object"
      properties:
        credentialId:
          type: "string"
        presetKey:
          type: "string"
        suite:
          type: "string"
        otp:
          type: "string"
        context:
          $ref: "#/components/schemas/Context"
    HotpCredentialSummary:
      type: "object"
      properties:
        id:
          type: "string"
        label:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        counter:
          type: "integer"
          format: "int64"
    HotpStoredSampleResponse:
      type: "object"
      properties:
        credentialId:
          type: "string"
        otp:
          type: "string"
        counter:
          type: "integer"
          format: "int64"
        algorithm:
          type: "string"
        digits:
          type: "integer"
          format: "int32"
        metadata:
          type: "object"
          additionalProperties:
            type: "string"
